# -*- mode: shell-script -*-
# vim: ft=zsh fdm=marker :

bindkey '[1;5C' forward-word
bindkey '[1;5D' backward-word
bindkey '[7~' beginning-of-line
bindkey '[8~' end-of-line
bindkey '[3~' delete-char

######################################################################

my-history-beginning-search-backward()
{
    local SPACES TMP
    TMP="${LBUFFER## #}"
    SPACES="${LBUFFER/$TMP/}"
    LBUFFER=$TMP
    zle history-beginning-search-backward
    LBUFFER="${SPACES}${TMP}"
}
my-history-beginning-search-forward()
{
    local SPACES TMP
    TMP="${LBUFFER## #}"
    SPACES="${LBUFFER/$TMP/}"
    LBUFFER=$TMP
    zle history-beginning-search-forward
    LBUFFER="${SPACES}${LBUFFER}"
}
zle -N my-history-beginning-search-backward
zle -N my-history-beginning-search-forward
bindkey '^p' my-history-beginning-search-backward
bindkey '^n' my-history-beginning-search-forward

clear-screen-hard()
{
    tput reset
    zle redisplay
}
zle -N clear-screen-hard
bindkey '^Xl' clear-screen-hard

######################################################################

for i in '``' '()' '{}' '[]'; do
    eval "function zle-paired-input-'$i'()
    {
        LBUFFER="'$LBUFFER'"'$i[1]'
        RBUFFER='$i[2]'"'$RBUFFER'"
    }"
    zle -N zle-paired-input-"$i"
    bindkey "$i[1]" zle-paired-input-"$i"
done
for i in \" \'; do
    eval "function zle-paired-input-\\$i()
    {
        LBUFFER="'$LBUFFER'"\\$i
        RBUFFER=\\$i"'$RBUFFER'"
    }"
    zle -N zle-paired-input-"$i"
    bindkey "$i" zle-paired-input-"$i"
done

######################################################################

autoload edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

######################################################################

last-arg-basename-widget()
{
    LBUFFER+=$_:t:q
}
zle -N last-arg-basename-widget
bindkey '>' last-arg-basename-widget

######################################################################

autoload -U smart-insert-last-word && zle -N smart-insert-last-word insert-last-word

bindkey -s '^Z' 'qbg && disown\n'

bindkey 'j' vi-find-next-char

######################################################################

expand-path()
{
    autoload -U modify-current-argument
    modify-current-argument '$ARG:Q:A:q'
}
zle -N expand-path
bindkey '^Xp' expand-path

######################################################################

zle-insert-line()
{
    echo -n "\e[0G\e[K"
    perl -Mutf8 -CS -e 'print "\N{U+2500}" x $ARGV[0], \n' $COLUMNS
    zle redisplay
}
zle -N zle-insert-line
bindkey '\el' zle-insert-line

######################################################################

bindkey -s 'r' "^u . ranger\n"

zranger()
{
    local RANGER_PID

    if RANGER_PID=$(tmux list-panes -s -F '#{pane_pid}' -t ranger 2> /dev/null); then
        echo $PWD > /tmp/zranger-cwd
        kill -SIGUSR1 $RANGER_PID
        tmux attach -d -t ranger
    else
        tmux new-session -s ranger 'exec ranger'
    fi

    # A second check needed because the process could have been
    # started or stopped in the meantime.
    if RANGER_PID=$(tmux list-panes -s -F '#{pane_pid}' -t ranger 2> /dev/null); then
        cd -P /proc/$RANGER_PID/cwd
    fi
}
bindkey -s '\ez' "^u zranger\n"

######################################################################

prepend-space()
{
    LBUFFER=" ${LBUFFER## #}"
}
zle -N prepend-space
bindkey ' ' prepend-space

######################################################################

exec-emacs-here()
{
    exec emacsclient -c -n .
}
zle -N exec-emacs-here
bindkey '^Xd' exec-emacs-here

######################################################################

autoload predict-on predict-off
my-predict-on()
{
    zstyle ':completion:*' completer _expand _complete _ignored
    predict-on
}
my-predict-off()
{
    zstyle ':completion:*' completer _expand _complete _ignored _approximate
    predict-off
}
zle -N my-predict-on
bindkey '^X-' my-predict-on
zle -N my-predict-off
bindkey '^X=' my-predict-off

######################################################################

my-create-generic-completion()
{
    autoload -U split-shell-arguments
    local reply REPLY REPLY2

    split-shell-arguments

    local i
    for ((i = $#reply-1; i > 0; --i)); do
        case $reply[i] in
            ';'|'|'|'||'|'&'|'&&'|'sudo')
                break
                ;;
        esac
    done

    compdef _gnu_generic $reply[i+2]
}
zle -N my-create-generic-completion
bindkey '^X^H' my-create-generic-completion

######################################################################

if (( $+commands[fzf] )); then
    fzf-cd() {
        cd "${$(find * -path '*/\.*' -prune \
                -o -type d -print 2> /dev/null | fzf -x):-.}"
        zle reset-prompt
    }
    zle     -N    fzf-cd
    bindkey '\ec' fzf-cd

    fzf-fasd-cd() {
        cd "${$(d -l | fzf -x):-.}"
        zle reset-prompt
    }
    zle     -N      fzf-fasd-cd
    bindkey '^X\ec' fzf-fasd-cd


    fzf-file-widget() {
        local FILES
        local IFS="
"
        FILES=($(
            find * -path '*/\.*' -prune \
                -o -type f -print \
                -o -type l -print 2> /dev/null | fzf -m -x))
        unset IFS
        FILES=$FILES:q

        LBUFFER="${LBUFFER%% #} $FILES"
        zle redisplay
    }
    zle     -N   fzf-file-widget
    bindkey '^X^W' fzf-file-widget

    fzf-crawler() {
        local REPLY
        while print -l *(/) .. | fzf -x +s | read; do
            cd $REPLY
        done
        zle reset-prompt
    }
    zle -N fzf-crawler
    bindkey '\ew' fzf-crawler
fi

######################################################################

# copied from Valodim's config
# just type '...' to get '../..'
function rationalise-dot() {
  local MATCH dir
  if [[ $LBUFFER =~ '(^|/| |    |'$'\n''|\||;|&)\.\.$' ]]; then
    LBUFFER+=/
    zle self-insert
    zle self-insert
    dir=${${(z):-x $LBUFFER}[-1]}
    [[ -e $dir ]] && zle -M $dir(:a)
  elif [[ $LBUFFER[-1] == '.' ]]; then
    zle self-insert
    dir=${${(z):-x $LBUFFER}[-1]}
    [[ -e $dir ]] && zle -M $dir(:a)
  else
    zle self-insert
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert
