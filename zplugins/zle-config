# -*- mode: shell-script -*-
# vim: ft=zsh fdm=marker :

bindkey '\e[1;5C' forward-word
bindkey '\e[1;5D' backward-word

# Home and End for urxvt, xterm and others
bindkey '\e[7~' beginning-of-line
bindkey '\e[8~' end-of-line

# Home and End for MobaXterm
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

bindkey '\e[3~' delete-char

######################################################################

my-history-beginning-search-backward()
{
    local SPACES TMP
    TMP="${LBUFFER## #}"
    SPACES="${LBUFFER/$TMP/}"
    LBUFFER=$TMP
    zle history-beginning-search-backward
    LBUFFER="${SPACES}${TMP}"
}
my-history-beginning-search-forward()
{
    local SPACES TMP
    TMP="${LBUFFER## #}"
    SPACES="${LBUFFER/$TMP/}"
    LBUFFER=$TMP
    zle history-beginning-search-forward
    LBUFFER="${SPACES}${LBUFFER}"
}
zle -N my-history-beginning-search-backward
zle -N my-history-beginning-search-forward
bindkey '^p' my-history-beginning-search-backward
bindkey '^n' my-history-beginning-search-forward

clear-screen-hard()
{
    tput reset
    zle redisplay
}
zle -N clear-screen-hard
bindkey '^Xl' clear-screen-hard

######################################################################

for i in '``' '()' '{}' '[]'; do
    eval "function zle-paired-input-'$i'()
    {
        LBUFFER="'$LBUFFER'"'$i[1]'
        RBUFFER='$i[2]'"'$RBUFFER'"
    }"
    zle -N zle-paired-input-"$i"
    bindkey '\e'"$i[1]" zle-paired-input-"$i"
done
for i in \" \'; do
    eval "function zle-paired-input-\\$i()
    {
        LBUFFER="'$LBUFFER'"\\$i
        RBUFFER=\\$i"'$RBUFFER'"
    }"
    zle -N zle-paired-input-"$i"
    bindkey '\e'"$i" zle-paired-input-"$i"
done

######################################################################

autoload edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

######################################################################

last-arg-basename-widget()
{
    LBUFFER+=$_:t:q
}
zle -N last-arg-basename-widget
bindkey '\e>' last-arg-basename-widget

######################################################################

autoload -U smart-insert-last-word && zle -N smart-insert-last-word insert-last-word

background_n_disown_widget()
{
    bg && disown
    zle reset-prompt
}
zle -N background_n_disown_widget
bindkey '^Z' background_n_disown_widget

bindkey '\ej' vi-find-next-char

######################################################################

expand-path()
{
    autoload -U modify-current-argument
    modify-current-argument '$ARG:Q:A:q'
}
zle -N expand-path
bindkey '^Xp' expand-path

######################################################################

zle-mkdir()
{
    autoload -U modify-current-argument
    function mkdir-worker() {
        REPLY=$~1
        REPLY=$REPLY:Q
        zle -M "Are you sure you want to create directory \"$REPLY\"? [y/n]"
        zle -R
        local KEY
        read -k KEY
        if [ "$KEY" = y ]; then
            if mkdir -p $REPLY 2> /dev/null; then
                zle -M "Directory \"$REPLY\" successfully created."
            else
                zle -M "Directory \"$REPLY\" couldn't be created."
            fi
            REPLY=${REPLY:q}/
        else
            zle -M ""
        fi
    }
    modify-current-argument mkdir-worker
}
zle -N zle-mkdir
bindkey '\em' zle-mkdir

######################################################################

zle-insert-line()
{
    echo -n "\e[0G\e[K"
    perl -Mutf8 -CS -e 'print "\N{U+2500}" x $ARGV[0], "\n"' $COLUMNS
    zle redisplay
}
zle -N zle-insert-line
bindkey '\el' zle-insert-line

######################################################################

bindkey -s '\er' "^u . ranger\n"
bindkey -s '\eR' "^u . rover.sh\n"

######################################################################

prepend-space()
{
    LBUFFER=" ${LBUFFER## #}"
}
zle -N prepend-space
bindkey '\e ' prepend-space

######################################################################

autoload predict-on predict-off
my-predict-on()
{
    zstyle ':completion:*' completer _expand _complete _ignored
    predict-on
}
my-predict-off()
{
    zstyle ':completion:*' completer _expand _complete _ignored _approximate
    predict-off
}
zle -N my-predict-on
bindkey '^X-' my-predict-on
zle -N my-predict-off
bindkey '^X=' my-predict-off

######################################################################

my-create-generic-completion()
{
    autoload -U split-shell-arguments
    local reply REPLY REPLY2

    split-shell-arguments

    local i
    for ((i = $#reply-1; i > 0; --i)); do
        case $reply[i] in
            ';'|'|'|'||'|'&'|'&&'|'sudo')
                break
                ;;
        esac
    done

    compdef _gnu_generic $reply[i+2]
}
zle -N my-create-generic-completion
bindkey '^X^H' my-create-generic-completion

######################################################################

save-as-snippet()
{
    local OLD_LBUFFER OLD_RBUFFER COMMAND_LINE SNIPPET_NAME

    OLD_LBUFFER=$LBUFFER
    OLD_RBUFFER=$RBUFFER
    COMMAND_LINE="${${BUFFER## #}%% #}"

    PREDISPLAY="Name of the snippet: "
    BUFFER=""
    if zle recursive-edit; then
        SNIPPET_NAME=$BUFFER
        mkdir -p ~/.snippets
        > ~/.snippets/$SNIPPET_NAME <<EOF
#!/bin/zsh
PS4='> '
set -x

$COMMAND_LINE
EOF
        chmod +x ~/.snippets/$SNIPPET_NAME
    fi

    unset PREDISPLAY
    LBUFFER=$OLD_LBUFFER
    RBUFFER=$OLD_RBUFFER
}
zle -N save-as-snippet
bindkey '^Xd' save-as-snippet

######################################################################

# Use the last command's output in the currect command.
# Press "w" again to use only the first line.
last-commands-output() {
    LBUFFER+='`!!`'
    zle -R
    local REPLY
    read -k || return
    if [ "$REPLY" = "w" ]; then
        LBUFFER=${LBUFFER%\`}' | head -n1`'
    else
        zle -U $REPLY
    fi
}
zle -N last-commands-output
bindkey '^Xw' last-commands-output

######################################################################

# copied from Valodim's config
# just type '...' to get '../..'
function rationalise-dot() {
  local MATCH dir
  if [[ $LBUFFER =~ '(^|/| |    |'$'\n''|\||;|&)\.\.$' ]]; then
    LBUFFER+=/
    zle self-insert
    zle self-insert
    dir=${${(z):-x $LBUFFER}[-1]}
    [[ -e $dir ]] && zle -M $dir(:a)
  elif [[ $LBUFFER[-1] == '.' ]]; then
    zle self-insert
    dir=${${(z):-x $LBUFFER}[-1]}
    [[ -e $dir ]] && zle -M $dir(:a)
  else
    zle self-insert
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert
