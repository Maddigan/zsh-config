# -*- mode: shell-script -*-
# vim: set ft=zsh fdm=marker :

if ! (( $+commands[ssh-attach.sh] )); then
    return 1
fi

MYKEY='1b:97:f1:43:86:01:00:58:de:85:18:d3:31:07:18:86'
ssh_prompt()
{
    if [ -z "$(pgrep ssh-agent)" ]; then
        if [ -n "$SSH_AUTH_SOCK" ]; then
            unset SSH_AUTH_SOCK
            unset SSH_AGENT_PID
        fi
        SSH_MARKER=
    elif [ -z "$SSH_AUTH_SOCK" ]; then
        SSH_MARKER="───($YELLOW"ssh"$RESET)"
    elif [ -n "$(ssh-add -l 2> /dev/null | grep "$MYKEY")" ]; then
        SSH_MARKER="───($YELLOW$BOLD"SSH"$RESET)"
    else
        SSH_MARKER="───($MAGENTA$BOLD"SSH"$RESET)"
    fi
}
periodic_functions=($periodic_functions ssh_prompt)

ssha()
{
    eval `ssh-attach.sh` > /dev/null
    export SSH_AGENT_PID=$(pgrep ssh-agent | head -n 1)
    if [[ -z "$(ssh-add -l 2> /dev/null | grep "$MYKEY")" ]]; then
        ssh-add
    fi
    ssh_prompt
}

sshad()
{
    if [ -n "$SSH_AGENT_PID" ]; then
        ssh-add -D
        eval `ssh-agent -k` > /dev/null
        unset SSH_AGENT_PID
        unset SSH_AUTH_SOCK
    else
        if [ -z "$(pgrep ssh-agent)" ]; then
            echo "No ssh-agent attached!"
        else
            ssha
            sshad
        fi
    fi
    SSH_MARKER=
}

sshadetach()
{
    unset SSH_AGENT_PID
    unset SSH_AUTH_SOCK
    ssh_prompt
}

if [ -n "$(pgrep ssh-agent)" -a -z "$SSH_AUTH_SOCK" ]; then
    eval `ssh-attach.sh` > /dev/null
fi

if ! (( $+commands[pamusb-check] )); then
    return
fi

sshauto()
{
    local KEYSTATE=$(ssh-add -l 2> /dev/null | grep $MYKEY)
    if [ -z "$KEYSTATE" ]; then
        if [ -n "$SSH_AGENT_PID" ]; then
            sshad &> /dev/null
        fi
        if [ -z "$(pgrep ssh-agent)" ]; then
            pamusb-check -q --service=ssh-agent_vfn vifon
            if [ "$?" = "0" ]; then
                expect <(sudo cat /root/sshattach.exp)
                ssha
            else
                echo \
                    "$GREEN$BOLD*$RESET Authentication request for user \"$USER\" (ssh-agent_vfn)
$RED$BOLD*$RESET Access denied."
                return 1;
            fi
        else
            ssha
        fi
    fi
}
